import json
import re
import requests
from requests.auth import HTTPBasicAuth
import urllib3
import httplib
import sys
import ConfigParser, os
import argparse




urllib3.disable_warnings()

def str2bool(v):
  return v.lower() in ("yes", "true", "t", "1")

def get_config_value(section,name):
    try:
        ret = config.get(section,name)
    except:
        ret = None
    return ret
        
def get_prio_arg(arg,config_value,name = 'default'):
    if arg != None:
        return arg
    elif config_value != None:
        return config_value
    else:
        print "can't fount " + name + " in args and config. exit."
        sys.exit(3)
    
def get_result(lvl):
    if lvl == 0:
        print "OK, value:" + str(result)
        sys.exit(0)
    elif lvl == 1:
        print "WARNING, value:" + str(result)
        sys.exit(1)
    elif lvl == 2:
        print "Critical, value:" + str(result)
        sys.exit(2)
    else:
        print "UNKNOWN, value:" + str(result)
        sys.exit(3)
    

def patch_send():
    old_send= httplib.HTTPConnection.send
    def new_send( self, data ):
        return old_send(self, data) #return is not necessary, but never hurts, in case the library is changed
    httplib.HTTPConnection.send= new_send




parser = argparse.ArgumentParser()
#global
parser.add_argument('-c,','--config')
# server section
parser.add_argument('-s', '--server')
parser.add_argument('-l', '--login')
parser.add_argument('-p', '--password')
# request section

parser.add_argument('-q', '--query')

#statement setion

parser.add_argument('-W', '--warning')
parser.add_argument('-C', '--critical')
parser.add_argument('-I', '--invert')




args = parser.parse_args()


config = ConfigParser.ConfigParser()
if args.config: 
    config.readfp(open(args.config))


config_arr = {}
# server section
config_arr['server'] = get_config_value("Server","server")
config_arr['login'] = get_config_value("Server","login")
config_arr['password'] = get_config_value("Server","password")
# request section
config_arr['query'] = get_config_value("Request","query")

#statement section
config_arr['warning'] = get_config_value("Statement","warning")
config_arr['critical'] = get_config_value("Statement","critical")
config_arr['invert'] = get_config_value("Statement","invert")




global basicAuth
global baseUrl
global headers
basicAuth = HTTPBasicAuth(get_prio_arg(args.login,config_arr['login'],'login'), get_prio_arg(args.password,config_arr['password'],'password'))
baseUrl = get_prio_arg(args.server,config_arr['server'],'server')
headers = {"Content-Type": "application/json"}
query = get_prio_arg(args.query,config_arr['query'],'query')
query = query.replace("\n","")

warning = float(get_prio_arg(args.warning,config_arr['warning'],'warning'))
critical = float(get_prio_arg(args.critical,config_arr['critical'],'critical'))

if args.critical != None:
    invert = str2bool(args.critical)
elif config_arr['invert'] != None:
    invert = str2bool(config_arr['invert'])
else:
    invert = False



def make_elem(url,data,field,full):
    return {"url":url.strip(),
            "data":json.loads(data.strip()),
            "field":field.strip(),
            "full": full}

def  get_elem(text):
    regex = r"(\((.*?)\)\.([a-zA-Z0-9]+))"
    regex2 = r"(.*?)({.*)"
    reg  = re.findall(regex,text)
    result = []
    
    for i in range(len(reg )):
        try:
            reg2  = re.findall(regex2,reg[i][1])
            result.append(make_elem(reg2[0][0],reg2[0][1], reg[i][2], reg[i][0]))
        except ValueError:
            print "can't parse string to json\nstring:\n" + reg[i][1]
            sys.exit(3)
        except Exception as exception:
            print "something wrong" + type(exception).__name__
            sys.exit(3)
    
    return result




def make_request(url,data):
    req = requests.get(baseUrl+url, json=data,auth=basicAuth , headers=headers, verify=False)
    if req.status_code != 200:
        print "got " + str(req.status_code) + " status_code, exit"
        sys.exit(3)
    try:
        res = json.loads(req.text)
    except ValueError:
        print "can,t parse response text, exit"
        sys.exit(3)
    #print res
    return res



res = get_elem(query)


for e in res:
    f = make_request(e['url'], e['data'] )
    query =  query.replace(e['full'], str(f[e['field']]))

try:
    result = eval(query)
except:
    print " cant eval \"" + query + "\""
    sys.exit(3)
    

if invert == False:
    if result > critical:
        get_result(2)
    elif result > warning:
        get_result(1)
    else: 
        get_result(0)
 
if invert == True:
    if result < critical:
        get_result(2)
    elif result < warning:
        get_result(1)
    else: 
        get_result(0)       

    
#THE END
    
    
    
    